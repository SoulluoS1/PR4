%назначить SYS_EXIT 1
%назначить SYS_WRITE 4
%назначить STDOUT 1
_printDec:
 раздел .bss
.decstr resb 10
.ct1 resd 1 ; для отслеживания размера строки
 раздел .текст
 pushad ; сохранить все регистры
 mov dword[.ct1],0 ; предположим изначально 0
 mov edi,.decstr ; edi указывает на decstring
 добавить edi,9 ; перемещено в последний элемент строки
 xor edx,edx ; очистить edx для 64-битного деления
.whileNotZero:
 mov ebx,10 ; приготовьтесь разделить на 10
 div ebx ; разделить на 10
 добавить edx,'0' ; преобразует в ascii char
 mov byte[edi],dl ; поместите его в sring
 dec edi ; mov к следующему символу в строке
 inc dword[.ct1] ; счетчик символов инкремента
 xor edx,edx ; очистить edx
 cmp eax,0 ; остаток от деления 0?
 jne .whileNotZero ; нет, продолжайте цикл

 inc edi ; преобразование, отделка, принести edi
 mov ecx, edi; вернуться к началу строки. сделать ecx
 mov edx, [.ct1] ; укажите на него, и edx получит # chars
 mov eax, SYS_WRITE ; и печать!
 mov ebx, STDOUT
 int 0x80
 popad ; восстановить все регистры
 ret
 _printString:
 push eax
 толчок ebx
 mov eax,SYS_WRITE
 mov ebx,STDOUT
 int 0x80
 pop ebx
 pop eax
 ret
_println:  
                section .data
.nl             db              10
                section .text
                push            ecx
                push            edx
                mov             ecx, .nl
                mov             edx, 1
                call            _printString
                pop             edx
                pop             ecx
                ret
        section .data
a       dd      0
b       dd      2
c       dd      3
iter    dd      100000000
i       dd      0
        section .text
        global  _start
_start: 
        mov     edx, 0          ; use edx as i
 mov ebx, dword[b] ; использовать ebx как 2*b + c
 добавить ebx, ebx
 добавить ebx, dword[c]
 mov eax, 0 ; использовать eax в качестве
 mov ecx, dword[iter]; ecx - счетчик циклов
для: добавить eax, ebx ; a += b*2 + c
 sub eax, edx ; a += -i
 inc edx ; i++
 петля для
конец для: 
 mov dword[a], eax
 вызов _printDec
 вызов _println
;;; выход
 mov eax, 1
 mov ebx, 0
 int 0x80
